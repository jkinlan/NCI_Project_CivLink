<?php

/**
 * @file
 * api_responses.module
 *
 * Provides responses for Services according to Whitehouse API Standards.
 */

/**
 * Implements hook_services_resources().
 */
function api_responses_services_resources() {
  $resources = array();

  $resources['responses'] = array(
    'operations' => array(
      'retrieve' => array(
        'callback' => '_api_responses_resource_retrieve',
        'args' => array(
          array(
            'name' => 'response_id',
            'optional' => FALSE,
            'source' => array('path' => 0),
            'type' => 'int',
            'description' => 'The response id of the response to get.',
          ),
          array(
            'name' => 'mock',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'When set to 1, this will cause the service to return a mock response.',
            'default value' => 0,
            'source' => array('param' => 'mock'),
          ),
        ),
        'access callback' => 'services_access_menu',
        'documentation callback' => '_api_responses_retrieve_doc',
      ),
      'index' => array(
        'callback' => '_api_responses_resource_index',
        'args' => array(
          array(
            'name' => 'petition_id',
            'optional' => TRUE,
            'type' => 'string',
            'description' => t('Filters results to display responses for a specific petition.'),
            'source' => array('param' => 'petitionId'),
          ),
          array(
            'name' => 'sort_by',
            'optional' => TRUE,
            'type' => 'string',
            'description' => 'Sets the field by which to sort results. Allowed values are "age".',
            'default value' => 'age',
            'source' => array('param' => 'sortBy'),
          ),
          array(
            'name' => 'sort_order',
            'optional' => TRUE,
            'type' => 'string',
            'description' => 'The order by which to sort. Allowed values are "asc" and "desc".',
            'default value' => 'desc',
            'source' => array('param' => 'sortOrder'),
          ),
          array(
            'name' => 'limit',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'The maximum number of results that may be returned. E.g., to return results 10-20, an offset of 10 and limit of 10 would be passed. Maximum limit is 50;',
            'default value' => 10,
            'source' => array('param' => 'limit'),
          ),
          array(
            'name' => 'offset',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'Offset the returned results by this number. E.g., to return results 10-20, an offset of 10 and limit of 10 would be passed.',
            'default value' => 0,
            'source' => array('param' => 'offset'),
          ),
          array(
            'name' => 'mock',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'When set to 1, this will cause the service to return a mock response.',
            'default value' => 0,
            'source' => array('param' => 'mock'),
          ),
        ),
        'access callback' => 'services_access_menu',
        'documentation callback' => '_api_responses_index_doc',
      ),
    ),
  );

  return $resources;
}

/**
 * Callback for Services responses retrieve method.
 *
 * @param int $response_id
 *   Response node ID
 *
 * @param bool $mock
 *   If TRUE, generate mock response.
 *
 * @return array
 *   Response array.
 */
function _api_responses_resource_retrieve($response_id, $mock) {
  global $base_url;
  $website_url = variable_get('petitions_data_petitions_website_url', $base_url);

  // Return mock response.
  if ($mock) {
    $response = json_decode(_api_responses_mock_response('retrieve'));
    return $response;
  }

  // Attempt to load response.
  if (!is_numeric($response_id)) {
    $developer_message = t('Invalid response_id.');
    return api_errors_throw_error(400, $developer_message);
  }

  $node = node_load($response_id);

  // Throw error if response was not found, wrong node type, or unpublished.
  if (!ResponseItem::checkValid($node)) {
    $status_code = 404;
    $developer_message = t("Response @response_id not found.", array('@response_id' => $response_id));
    $user_message = t("The response that you requested does not exist.", array('@response_id' => $response_id));
    $error_code = 84;
    $more_info = t('See the documentation: !url/developers#response-retrieve-error-404', array('!url' => $website_url));
    return api_errors_throw_error($status_code, $developer_message, $user_message, $more_info, $error_code);
  }

  $rest_results = _api_response_get_rest_response($node);


  $query_parameters = array(
    'response_id' => $response_id,
    'mock' => $mock,
  );

  $request_info = array(
    'apiVersion' => 1,
    'resource' => 'responses',
    'query' => $query_parameters,
  );

  $response_params = array(
    'request_info' => $request_info,
    'results' => array($rest_results),
    'limit' => 1,
    'count' => 1,
  );

  $response = api_services_responses_format($response_params);

  return $response;
}

/**
 * Callback for Services responses index method.
 *
 * @param string $petition_id
 *   Filter responses by petition_id, node or legacy ID.
 *
 * @param string $sort_by
 *   Sort responses by allowed fields.
 * @param string $sort_order
 *   Sort asc or desc.
 * @param int $limit
 *   Limit results returned.
 * @param int $offset
 *   Offset of results returned.
 * @param bool $mock
 *   If TRUE, generate mock response.
 *
 * @return array
 *   Response array.
 */
function _api_responses_resource_index($petition_id, $sort_by, $sort_order, $limit, $offset, $mock) {
  $rest_results = NULL;
  $responses_default_limit = variable_get('api_responses_index_max_limit', 50);

  // Return mock response.
  if ($mock) {
    $response = json_decode(_api_responses_mock_response('index'));
    return $response;
  }

  $sort_by = strtoupper($sort_by);
  $sort_order = strtoupper($sort_order);

  $valid_sort_by_fields = array(
    'AGE' => 'created',
  );

  $valid_sort_order_fields = array('ASC', 'DESC');

  // Validate arguments.
  if ($sort_by != '' && !in_array($sort_by, array_keys($valid_sort_by_fields))) {
    $developer_message = t('Invalid sortBy argument.');
    return api_errors_throw_error(400, $developer_message);
  }

  if ($sort_order != '' && !in_array($sort_order, $valid_sort_order_fields)) {
    $developer_message = t('Invalid sortOrder argument.');
    return api_errors_throw_error(400, $developer_message);
  }

  $query = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('n.type', 'wh_response')
    ->condition('n.status', 1);

  if ($petition_id != '') {
    $petition_nid = petition_get_nid($petition_id);
    if (!$petition_nid) {
      $developer_message = t('Unable to load responses for petition id :petition_id.', array(':petition_id' => $petition_id));
      return api_errors_throw_error(400, $developer_message);
    }

    $query->join('field_data_field_petition_id', 'fpi', 'fpi.entity_id = n.nid');
    $query->fields('fpi', array('field_petition_id_target_id'));
    $query->condition('fpi.field_petition_id_target_id', $petition_nid);
  }

  $total_rows = $query->countQuery()->execute()->fetchField();

  $limit = min($limit, $responses_default_limit);
  $query->range($offset, $limit);

  if ($sort_by) {
    $query->orderBy($valid_sort_by_fields[$sort_by], $sort_order);
  }

  $nids = $query->execute()->fetchCol();
  $nodes = node_load_multiple($nids);

  if ($nodes) {
    $rest_results = array_map('_api_response_get_rest_response', array_values($nodes));
  }

  $query_parameters = array(
    'petition_id' => $petition_id,
    'sortBy' => $sort_by,
    'sortOrder' => $sort_order,
    'limit' => $limit,
    'offset' => $offset,
    'mock' => $mock,
  );

  $request_info = array(
    'apiVersion' => 1,
    'resource' => 'responses',
    'query' => $query_parameters,
  );

  $response_params = array(
    'request_info' => $request_info,
    'results' => $rest_results,
    'count' => $total_rows,
    'limit' => $limit,
    'offset' => $offset,
  );

  return api_services_responses_format($response_params);
}

/**
 * Documentation callback for retrieve method of responses resource.
 */
function _api_responses_retrieve_doc() {
  $element = array(
    '#name' => t('Retrieve'),
    '#path' => '/responses/{response_id}',
    '#weight' => 2,
    '#description' => t('Returns a response matching the response id.'),
    '#request_url' => '/v1/responses/319326.json',
    '#response' => _api_responses_mock_response('retrieve'),
    '#errors' => _api_responses_retrieve_doc_errors(),
  );

  return $element;
}

/**
 * Documentation callback for index method.
 */
function _api_responses_index_doc() {
  $element = array(
    '#name' => t('Index'),
    '#path' => '/responses',
    '#weight' => 1,
    '#description' => t('Returns a list of responses matching passed parameters.'),
    '#request_url' => '/v1/responses.json?limit=3&offset=0',
    '#response' => _api_responses_mock_response('index'),
    '#errors' => _api_responses_index_doc_errors(),
  );

  return $element;
}

/**
 * Documentation callback for errors related to the retrieve method.
 */
function _api_responses_retrieve_doc_errors() {
  $errors = array(
    '404' => array(
      '#question' => t('What happens if an invalid response ID is requested?'),
      '#description' => t('If the request specifies an invalid response ID, what will the response look like?'),
      '#response' => _api_responses_mock_response('retrieve404'),
    ),
    '599' => array(
      '#question' => t('What happens in case of server error?'),
      '#description' => t('If the request fails due to a server problem, what will the response look like?'),
      '#response' => _api_petitions_mock_response('retrieve599'),
    ),
  );

  return $errors;
}

/**
 * Documentation callback for errors related to the index method.
 */
function _api_responses_index_doc_errors() {
  // @todo Have all possible errors been captured?.
  $errors = array(
    '599' => array(
      '#question' => t('What happens in case of an unknown error?'),
      '#description' => t('If the request fails due to an unpredicted problem, what will the response look like?'),
      '#response' => _api_responses_mock_response('index599'),
    ),
  );

  return $errors;
}

/**
 * Returns a mock response for responses methods.
 *
 * @param string $method
 *   Response method to generate mock response for.
 *
 * @return string
 *   Mock response JSON data.
 */
function _api_responses_mock_response($method) {
  $file = '';
  switch ($method) {
    case 'index':
      $file = 'api_responses_index.response.json';
      break;

    case 'index599':
      $file = 'api_responses_index.response599.json';
      break;

    case 'retrieve':
      $file = 'api_responses_retrieve.response.json';
      break;

    case 'retrieve404':
      $file = 'api_responses_retrieve.response404.json';
      break;

    case 'retrieve599':
      $file = 'api_responses_retrieve.response599.json';
      break;
  }
  $response = file_get_contents(__DIR__ . '/example_responses/' . $file);
  return htmlspecialchars($response);
}

/**
 * Recursively scan the directory of an example implementation.
 */
function _api_responses_directory_scan_recursively($directory) {
  $directory_contents = array();
  $current_directory = scandir($directory);
  foreach ($current_directory as $key => $value) {
    if (!in_array($value, array(".", ".."))) {
      if (is_dir($current_directory . '/' . $value)) {
        $directory_contents[$value] = _api_responses_directory_scan_recursively($current_directory . '/' . $value);
      }
      else {
        $directory_contents[] = $value;
      }
    }
  }
  return $directory_contents;
}

/**
 * Generate a REST response array for a response node.
 *
 * @param object $node
 *   Response node
 *
 * @return array
 *   REST Response array
 */
function _api_response_get_rest_response($node) {
  $response_item = new ResponseItem($node);
  return $response_item->toRestResponseItemArray();
}

<?php

/**
 * @file
 * Provides a petitions Services resource.
 */

/**
 * Implements hook_services_resources().
 */
function api_petitions_services_resources() {
  $resources = array();

  $resources['petitions'] = array(
    'operations' => array(
      'retrieve' => array(
        'callback' => '_api_petitions_resource_retrieve',
        'args' => array(
          array(
            'name' => 'petition_id',
            'optional' => FALSE,
            'source' => array('path' => 0),
            'type' => 'string',
            'description' => 'The petition id of the petition to get.',
          ),
          array(
            'name' => 'mock',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'When set to 1, this will cause the service to return a mock response.',
            'default value' => 0,
            'source' => array('param' => 'mock'),
          ),
        ),
        'access callback' => 'services_access_menu',
        'documentation callback' => '_api_petitions_retrieve_doc',
      ),
      'index' => array(
        'callback' => '_api_petitions_resource_index',
        'args' => array(
          array(
            'name' => 'is_public',
            'optional' => TRUE,
            'type' => 'int',
            'description' => t('When set to 1, this will only return petitions that are public.'),
            'default value' => 1,
            'source' => array('param' => 'isPublic'),
          ),
          array(
            'name' => 'is_signable',
            'optional' => TRUE,
            'type' => 'int',
            'description' => t('When set to 1, this will only return petitions accepting signatures. When set to 0, returns only un-signable petitions.'),
            'default value' => NULL,
            'source' => array('param' => 'isSignable'),
          ),
          array(
            'name' => 'created_before',
            'optional' => TRUE,
            'type' => 'int',
            'description' => t('Filters results to display items created before specified time. Accepts Unix timestamp. (There\'s a handy unix timestamp converter <a href="@here">here</a>.)', array(
              '@here' => 'http://www.unixtimestamp.com/',
            )),
            'source' => array('param' => 'createdBefore'),
            'deprecated' => TRUE,
            'deprecated_message' => t('@field will not be supported in API version 2.', array(
              '@field' => 'createdBefore',
            )),
          ),
          array(
            'name' => 'created_after',
            'optional' => TRUE,
            'type' => 'int',
            'description' => t('Filters results to display items created after specified time. Accepts Unix timestamp. (There\'s a handy unix timestamp converter <a href="@here">here</a>.)', array(
              '@here' => 'http://www.unixtimestamp.com/',
            )),
            'source' => array('param' => 'createdAfter'),
            'deprecated' => TRUE,
            'deprecated_message' => t('@field will not be supported in API version 2.', array(
              '@field' => 'createdAfter',
            )),
          ),
          array(
            'name' => 'created_at',
            'optional' => TRUE,
            'type' => 'int',
            'description' => t('Filters results to display items created (or published) at specified time. Accepts Unix timestamp. (There\'s a handy unix timestamp converter <a href="@here">here</a>.)', array(
              '@here' => 'http://www.unixtimestamp.com/',
            )),
            'source' => array('param' => 'createdAt'),
            'deprecated' => TRUE,
            'deprecated_message' => t('@field will not be supported in API version 2.', array(
              '@field' => 'createdAt',
            )),
          ),
          array(
            'name' => 'limit',
            'optional' => TRUE,
            'type' => 'int',
            'description' => t('The maximum number of results that may be returned. E.g., to return results 10-20, an offset of 10 and limit of 10 would be passed. Maximum limit is @petitions_default_limit; developers who need historic data on all public petitions should consider using our bulk data download, described above.', array(
              '@petitions_default_limit' => variable_get('api_petitions_index_max_limit', 1000),
            )),
            'default value' => 10,
            'source' => array('param' => 'limit'),
          ),
          array(
            'name' => 'offset',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'Offset the returned results by this number. E.g., to return results 10-20, an offset of 10 and limit of 10 would be passed.',
            'default value' => 0,
            'source' => array('param' => 'offset'),
          ),
          array(
            'name' => 'title',
            'optional' => TRUE,
            'type' => 'string',
            'description' => 'Filters results by keyword or phrase in the Title.',
            'default value' => NULL,
            'source' => array('param' => 'title'),
          ),
          array(
            'name' => 'body',
            'optional' => TRUE,
            'type' => 'string',
            'description' => 'Filters results by keyword or phrase in the Body.',
            'default value' => NULL,
            'source' => array('param' => 'body'),
          ),
          array(
            'name' => 'signature_threshold_ceiling',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'Filters results by maximum Signature Threshold.',
            'default value' => NULL,
            'source' => array('param' => 'signatureThresholdCeiling'),
          ),
          array(
            'name' => 'signature_threshold',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'Filters results by exact Signature Threshold.',
            'default value' => NULL,
            'source' => array('param' => 'signatureThreshold'),
          ),
          array(
            'name' => 'signature_threshold_floor',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'Filters results by minimum Signature Threshold.',
            'default value' => NULL,
            'source' => array('param' => 'signatureThresholdFloor'),
          ),
          array(
            'name' => 'signature_count_ceiling',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'Filters results by maximum Signature Count.',
            'default value' => NULL,
            'source' => array('param' => 'signatureCountCeiling'),
          ),
          array(
            'name' => 'signature_count',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'Filters results by exact Signature Count.',
            'default value' => NULL,
            'source' => array('param' => 'signatureCount'),
          ),
          array(
            'name' => 'signature_count_floor',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'Filters results by minimum Signature Count.',
            'default value' => 0,
            'source' => array('param' => 'signatureCountFloor'),
          ),
          array(
            'name' => 'url',
            'optional' => TRUE,
            'type' => 'string',
            'description' => 'Filters results by Petition URL.',
            'default value' => NULL,
            'source' => array('param' => 'url'),
          ),
          array(
            'name' => 'status',
            'optional' => TRUE,
            'type' => 'string',
            'description' => 'Filters results by Status. Allowed values are "open", "pending response", "responded", and "closed".',
            'default value' => NULL,
            'source' => array('param' => 'status'),
          ),
          array(
            'name' => 'response_id',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'Filters results by Response ID .',
            'default value' => NULL,
            'source' => array('param' => 'responseID'),
          ),
          array(
            'name' => 'response_association_time_before',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'Filters results to display items with a Response Assocation before a specified time. Accepts Unix timestamp.',
            'default value' => NULL,
            'source' => array('param' => 'responseAssociationTimeBefore'),
          ),
          array(
            'name' => 'sort_by',
            'optional' => TRUE,
            'type' => 'string',
            'description' => 'Sets the field by which to sort results. Allowed values are "signature_count" and "date_reached_public".',
            'default value' => 'date_reached_public',
            'source' => array('param' => 'sortBy'),
          ),
          array(
            'name' => 'sort_order',
            'optional' => TRUE,
            'type' => 'string',
            'description' => 'The order by which to sort. Allowed values are "asc" and "desc".',
            'default value' => 'asc',
            'source' => array('param' => 'sortOrder'),
          ),
          array(
            'name' => 'mock',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'When set to 1, this will cause the service to return a mock response.',
            'default value' => 0,
            'source' => array('param' => 'mock'),
          ),
          /*
          array(
            'name' => 'petition_id',
            'optional' => TRUE,
            'type' => 'string',
            'description' => 'Accepts a comma-separated list of petition ids',
            'default value' => NULL,
            'source' => array('param' => 'petition_id'),
          ),
          */
        ),
        'access callback' => 'services_access_menu',
        'documentation callback' => '_api_petitions_index_doc',
      ),
    ),
    'relationships' => array(
      'signatures' => array(
        'help' => t('This method returns signatures associated with a petition.'),
        'callback' => '_api_petitions_load_signatures',
        'args' => array(
          array(
            'name' => 'petition_id',
            'optional' => FALSE,
            'source' => array('path' => 0),
            'type' => 'string',
            'description' => 'The petition id of the petition whose signatures we are getting.',
          ),
          array(
            'name' => 'city',
            'optional' => TRUE,
            'type' => 'string',
            'description' => t('Filters results by associated city.'),
            'source' => array('param' => 'city'),
          ),
          array(
            'name' => 'state',
            'optional' => TRUE,
            'type' => 'string',
            'description' => t('Filters results by associated state.'),
            'source' => array('param' => 'state'),
          ),
          array(
            'name' => 'zipcode',
            'optional' => TRUE,
            'type' => 'int',
            'description' => t('Filters results by associated zipcode.'),
            'source' => array('param' => 'zipcode'),
          ),
          array(
            'name' => 'country',
            'optional' => TRUE,
            'type' => 'string',
            'description' => t('Filters results by associated country.'),
            'source' => array('param' => 'country'),
          ),
          array(
            'name' => 'created_before',
            'optional' => TRUE,
            'type' => 'int',
            'description' => t('Filters results to display items created before specified time. Accepts Unix timestamp. (There\'s a handy unix timestamp converter <a href="@here">here</a>.)', array(
              '@here' => 'http://www.unixtimestamp.com/',
            )),
            'source' => array('param' => 'createdBefore'),
            'deprecated' => TRUE,
            'deprecated_message' => t('@field will not be supported in API version 2.', array(
              '@field' => 'createdBefore',
            )),
          ),
          array(
            'name' => 'created_after',
            'optional' => TRUE,
            'type' => 'int',
            'description' => t('Filters results to display items created after specified time. Accepts Unix timestamp. (There\'s a handy unix timestamp converter <a href="@here">here</a>.)', array(
              '@here' => 'http://www.unixtimestamp.com/',
            )),
            'source' => array('param' => 'createdAfter'),
            'deprecated' => TRUE,
            'deprecated_message' => t('@field will not be supported in API version 2.', array(
              '@field' => 'createdAfter',
            )),
          ),
          array(
            'name' => 'created_at',
            'optional' => TRUE,
            'type' => 'int',
            'description' => t('Filters results to display items created before specified time. Accepts Unix timestamp. (There\'s a handy unix timestamp converter <a href="@here">here</a>.)', array(
              '@here' => 'http://www.unixtimestamp.com/',
            )),
            'source' => array('param' => 'createdAt'),
            'deprecated' => TRUE,
            'deprecated_message' => t('@field will not be supported in API version 2.', array(
              '@field' => 'createdAt',
            )),
          ),
          array(
            'name' => 'limit',
            'optional' => TRUE,
            'type' => 'int',
            'description' => t('The maximum number of results that may be returned. E.g., to return results 10-20, an offset of 10 and limit of 10 would be passed. Maximum limit is @signatures_default_limit; developers who need historic data on all public petitions should consider using our bulk data download, described above.',
              array('@signatures_default_limit' => variable_get('api_petitions_signatures_index_max_limit', 1000))),
            'default value' => 1000,
            'source' => array('param' => 'limit'),
          ),
          array(
            'name' => 'offset',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'Offset the returned results by this number. E.g., to return results 10-20, an offset of 10 and limit of 10 would be passed.',
            'default value' => 0,
            'source' => array('param' => 'offset'),
          ),
          array(
            'name' => 'mock',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'When set to 1, this will cause the service to return a mock response.',
            'default value' => 0,
            'source' => array('param' => 'mock'),
          ),
        ),
        'access callback' => 'services_access_menu',
        'documentation callback' => '_api_petitions_load_signatures_doc',
      ),
    ),
  );

  return $resources;
}

/**
 * Callback for Services petitions retrieve method.
 */
function _api_petitions_resource_retrieve($petition_id, $mock) {
  global $base_url;

  $website_url = variable_get('petitions_data_petitions_website_url', $base_url);

  // Return mock response.
  if ($mock) {
    $response = json_decode(_api_petitions_mock_response('retrieve'));
    return $response;
  }

  // Attempt to load response.
  try {
    $petition = PetitionsController::load($petition_id);
  }
  // Catch any errors that may cause $resource->load() to fail. E.g., mongodb.
  // errors. Throw our own, custom error instead.
  catch (Exception $e) {
    watchdog('api_petitions', $e->getMessage());
    $error_code = 83;
    list($status_code, $developer_message, $user_message, $more_info) = api_errors_error_code_information($error_code, $petition_id);
    return api_errors_throw_error($status_code, $developer_message, $user_message, $more_info, $error_code);
  }

  // Throw error if petition was not found.
  if (empty($petition)) {
    $error_code = 84;
    list($status_code, $developer_message, $user_message, $more_info) = api_errors_error_code_information($error_code, $petition_id);
    return api_errors_throw_error($status_code, $developer_message, $user_message, $more_info, $error_code);
  }

  $response_params = array(
    'results' => array($petition),
    'limit' => 1,
  );

  $response = api_services_responses_format($response_params);

  return $response;
}

/**
 * Callback for Services petitions index method.
 */
function _api_petitions_resource_index($is_public, $is_signable, $created_before, $created_after, $created_at, $limit, $offset, $title, $body, $signature_threshold_ceiling, $signature_threshold, $signature_threshold_floor, $signature_count_ceiling, $signature_count, $signature_count_floor, $url, $status, $response_id, $response_association_time_before, $sort_by, $sort_order, $mock) {
  global $base_url;

  $website_url = variable_get('petitions_data_petitions_website_url', $base_url);

  $public_threshold = variable_get('wh_petitions_public_signatures', 150) - 1;
  $petitions_default_limit = variable_get('api_petitions_index_max_limit', 1000);

  // Return mock response.
  if ($mock) {
    $response = json_decode(_api_petitions_mock_response('index'));
    return $response;
  }

  // Err if request is for non-public petitions. This is not allowed.
  if (!$is_public) {
    $error_code = 86;
    list($status_code, $developer_message, $user_message, $more_info) = api_errors_error_code_information($error_code);
    api_errors_throw_error($status_code, $developer_message, $user_message, $more_info, $error_code);
  }

  // Err if request includes an invalid responseID argument.
  if ($response_id && !is_numeric($response_id)) {
    $error_code = 87;
    list($status_code, $developer_message, $user_message, $more_info) = api_errors_error_code_information($error_code);
    api_errors_throw_error($status_code, $developer_message, $user_message, $more_info, $error_code);
  }

  // The "url" argument is, for all practical purposes, a unique identifier. So
  // if one is provided, just redirect the request to the retrieve method so
  // that private petitions are accessible, just like they would be if the
  // petition ID were provided directly. (Obviously the user knows about the
  // existence of this petition if they have its URL.)
  if (!empty($url)) {
    // If the URL doesn't include a path, it's not a valid petition URL. Note:
    // the path component returned by parse_url() includes the leading forward
    // slash (/), so the minimum required length is two.
    if (strlen(parse_url($url, PHP_URL_PATH)) < 2) {
      $error_code = 88;
      list($status_code, $developer_message, $user_message, $more_info) = api_errors_error_code_information($error_code);
      api_errors_throw_error($status_code, $developer_message, $user_message, $more_info, $error_code);
    }

    $results = PetitionsSelectQueryFactory::create(FALSE)
      ->setURL($url)
      ->execute()
      ->getResult();

    // Return a 404 if no results are found.
    if (empty($results[0]['id'])) {
      $error_code = 84;
      list($status_code, $developer_message, $user_message, $more_info) = api_errors_error_code_information($error_code);
      return api_errors_throw_error($status_code, $developer_message, $user_message, $more_info, $error_code);
    }

    return _api_petitions_resource_retrieve($results[0]['id'], $mock);
  }

  $query_base = PetitionsSelectQueryFactory::create(FALSE);
  $sort_by = strtoupper($sort_by);
  $sort_order = strtoupper($sort_order);

  if (!in_array($sort_by, $query_base::getValidPetitionsOrderByFields(), TRUE)) {
    $sort_by = $query_base::SELECT_QUERY_ORDER_BY_FIELD_DATE_REACHED_PUBLIC;
  }
  if (!in_array($sort_order, $query_base::getValidOrderByDirections(), TRUE)) {
    $sort_order = SelectQueryBase::SELECT_QUERY_ORDER_BY_ASC;
  }




  // Makes the assumption that all query parameters are present at this instant.
  // This brittle, the values here can be altered by setters when petitions_data
  // module builds the query to correspond with this request.
  // @todo After mongo is replaced with mysql, consider hardening this by
  // tying it directly to whatever is executing the query, so there's no
  // possibility that the requested query and the actual query executed could
  // get out of sync.
  $query_parameters = array(
    'body' => $body,
    'createdAfter' => $created_after,
    'createdAt' => $created_at,
    'createdBefore' => $created_before,
    'isPublic' => $is_public,
    'isSignable' => $is_signable,
    'limit' => $limit,
    'mock' => $mock,
    'offset' => $offset,
    'petitionsDefaultLimit' => $petitions_default_limit,
    'publicThreshold' => $public_threshold,
    'responseId' => $response_id,
    'signatureCount' => $signature_count,
    'signatureCountCeiling' => $signature_count_ceiling,
    'signatureCountFloor' => $signature_count_floor,
    'signatureThreshold' => $signature_threshold,
    'signatureThresholdCeiling' => $signature_threshold_ceiling,
    'signatureThresholdFloor' => $signature_threshold_floor,
    'status' => $status,
    'title' => $title,
    'url' => $url,
    'websiteUrl' => $website_url,
    'sortBy' => $sort_by,
    'sortOrder' => $sort_order,
  );
  ksort($query_parameters);

  try {
    $query = PetitionsSelectQueryFactory::create(FALSE);
    // Scaffolding is in place for inactive parameters but logic is required.
    $query
     ->setBaseURL($website_url)
     ->setMinSignatureCount($public_threshold)
     ->setMaxReturnLimit($petitions_default_limit)
     ->setStartDate($created_after)
     ->setEndDate($created_before)
     ->setCreatedAt($created_at)
     ->setLimit($limit)
     ->setOffset($offset)
     ->setTitle($title)
     ->setBody($body)
     ->setSignatureThresholdCeiling($signature_threshold_ceiling)
     ->setSignatureThreshold($signature_threshold)
     ->setSignatureThresholdFloor($signature_threshold_floor)
     ->setSignatureCountCeiling($signature_count_ceiling)
     ->setSignatureCount($signature_count)
     ->setSignatureCountFloor($signature_count_floor)
     ->setIsSignable($is_signable)
     ->setURL($url)
     ->setStatus($status)
     ->setIsPublic($is_public)
     ->setResponseID($response_id)
     ->setOrderBy($sort_by, $sort_order);

    $request_info = array(
      'apiVersion' => 1,
      'resource' => 'petitions',
      'query' => $query_parameters,
    );

    $response_params = array(
      'request_info' => $request_info,
      'results' => $query->execute()->getResult(),
      'count' => $query->getCount(),
      'limit' => $limit,
      'offset' => $offset,
    );

    return api_services_responses_format($response_params);
  }
  // Throw error if resource cannot be accessed.
  catch (Exception $e) {
    $data = (method_exists($e, 'getData')) ? $e->getData() : array();
    if (!$e->getCode()) {
      // There is no specified status code so make one up.
      $error_code = 599;
    }
    else {
      $error_code = $e->getCode();
    }
    watchdog('api_petitions', $e->getMessage());
    list($status_code, $developer_message, $user_message, $more_info) = api_errors_error_code_information($error_code);
    return api_errors_throw_error($status_code, $developer_message, $user_message, $more_info, $error_code);
  }
}

/**
 * Callback for Services petitions signatures relationship method.
 */
function _api_petitions_load_signatures($petition_id, $city, $state, $zipcode, $country, $created_before, $created_after, $created_at, $limit, $offset, $mock) {
  global $base_url;

  $website_url = variable_get('petitions_data_petitions_website_url', $base_url);

  // Return mock response.
  if ($mock) {
    $response = json_decode(_api_petitions_mock_response('load_signatures'));
    return $response;
  }

  // Ensure the petition ID is valid.
  $petition = PetitionsController::load($petition_id);
  if (empty($petition)) {
    $error_code = 84;
    list($status_code, $developer_message, $user_message, $more_info) = api_errors_error_code_information($error_code, $petition_id);
    return api_errors_throw_error($status_code, $developer_message, $user_message, $more_info, $error_code);
  }

  $signatures_default_limit = variable_get('api_petitions_signatures_index_max_limit', 1000);

  try {
    $resource = SignaturesSelectQueryFactory::create(FALSE);
    $resource->setCity($city)
      ->setState($state)
      ->setZipCode($zipcode)
      ->setCountry($country)
      ->setStartDate($created_after)
      ->setEndDate($created_before)
      ->setCreatedAt($created_at)
      ->setMaxReturnLimit($signatures_default_limit)
      ->setLimit($limit)
      ->setOffset($offset)
      ->setPetitionId($petition_id);

    $response_params = array(
      'results' => $resource->execute()->getResult(),
      'count' => $resource->getCount(),
      'limit' => $limit,
      'offset' => $offset,
    );

    return api_services_responses_format($response_params);
  }
  // Throw error if resource cannot be accessed.
  catch (Exception $e) {
    watchdog('api_petitions', $e->getMessage());
    $error_code = 83;
    list($status_code, $developer_message, $user_message, $more_info) = api_errors_error_code_information($error_code);
    return api_errors_throw_error($status_code, $developer_message, $user_message, $more_info, $error_code);
  }
}

/**
 * Documentation callback for retrieve method of petitions resource.
 */
function _api_petitions_retrieve_doc() {
  $element = array(
    '#name' => t('Retrieve'),
    '#path' => '/petitions/{petition_id}',
    '#weight' => 2,
    '#description' => t('Returns a petition matching the petition id.'),
    '#request_url' => url(variable_get('petitions_data_petitions_api_url', '') . '/v1/petitions/226511.json', array('absolute' => TRUE)),
    '#response' => _api_petitions_mock_response('retrieve'),
    '#example_implementations_bundles' => _api_petitions_retrieve_doc_example_implementations_bundles(),
    '#errors' => _api_petitions_retrieve_doc_errors(),
  );

  return $element;
}

/**
 * Documentation callback for bundled examples implementing retrieve method.
 */
function _api_petitions_retrieve_doc_example_implementations_bundles() {
  $example_implementations_bundles = array(
    'javascript' => array(
      '#language' => t('JavaScript'),
      '#examples' => _api_petitions_retrieve_doc_example_implementations(),
    ),
  );

  return $example_implementations_bundles;
}

/**
 * Documentation callback for examples implementing retrieve method.
 */
function _api_petitions_retrieve_doc_example_implementations() {
  $example_implementations = array(
    'thermometer' => array(
      '#name' => t('Thermometer'),
      '#description' => t('Display the status of a petition as a thermometer.'),
      '#download_link' => drupal_get_path('module', 'api_petitions') . '/example_implementations/javascript/thermometer.zip',
      '#uses_sdk' => FALSE,
    ),
  );

  return $example_implementations;
}

/**
 * Documentation callback for errors related to the retrieve method.
 */
function _api_petitions_retrieve_doc_errors() {
  $errors = array(
    '404' => array(
      '#question' => t('What happens if an invalid petition ID is requested?'),
      '#description' => t('If the request specifies an invalid petition ID, what will the response look like?'),
      '#response' => _api_petitions_mock_response('retrieve404'),
    ),
    '599' => array(
      '#question' => t('What happens in case of server error?'),
      '#description' => t('If the request fails due to a server problem, what will the response look like?'),
      '#response' => _api_petitions_mock_response('retrieve599'),
    ),
  );

  return $errors;
}

/**
 * Documentation callback for index method.
 */
function _api_petitions_index_doc() {
  $element = array(
    '#name' => t('Index'),
    '#path' => '/petitions',
    '#weight' => 1,
    '#description' => _api_petitions_petitions_preface(),
    '#request_url' => variable_get('petitions_data_petitions_api_url', '') . '/v1/petitions.json?limit=3&offset=0&createdBefore=1352924535',
    '#response' => _api_petitions_mock_response('index'),
    '#errors' => _api_petitions_index_doc_errors(),
  );

  return $element;
}

/**
 * Documentation callback for errors related to the index method.
 */
function _api_petitions_index_doc_errors() {
  // @todo Have all possible errors been captured?.
  $errors = array(
    '599' => array(
      '#question' => t('What happens in case of an unknown error?'),
      '#description' => t('If the request fails due to an unpredicted problem, what will the response look like?'),
      '#response' => _api_petitions_mock_response('index599'),
    ),
  );

  return $errors;
}

/**
 * Documentation callback for relationship method.
 */
function _api_petitions_load_signatures_doc() {
  $element = array(
    '#name' => t('Signatures List'),
    '#path' => '/petitions/{petition_id}/signatures',
    '#weight' => 3,
    '#description' => t('Display signatures attached to a petition. Unsupported non-Latin characters are replaced with an "x".'),
    '#request_url' => url(variable_get('petitions_data_petitions_api_url', '') . '/v1/petitions/226511/signatures.json?limit=16&offset=0', array('absolute' => TRUE)),
    '#response' => _api_petitions_mock_response('load_signatures'),
    '#errors' => _api_petitions_load_signatures_doc_errors(),
    '#verb' => 'GET',
  );

  return $element;
}

/**
 * Documentation callback for errors related to the signatures relationship.
 */
function _api_petitions_load_signatures_doc_errors() {
  $errors = array(
    '404' => array(
      '#question' => t('What happens if an invalid petition ID is requested?'),
      '#description' => t('If the request specifies an invalid petition ID, what will the response look like?'),
      '#response' => _api_petitions_mock_response('load_signatures404'),
    ),
    '599' => array(
      '#question' => t('What happens in case of server error?'),
      '#description' => t('If the request fails due to a server problem, what will the response look like?'),
      '#response' => _api_petitions_mock_response('load_signatures599'),
    ),
  );

  return $errors;
}

/**
 * Returns a mock response for petitions methods.
 *
 * @param string $method
 *   A method identifier.
 *
 * @return string
 *   The JSON mock response for the given identifier, or an empty string in case
 *   of an invalid identifier.
 */
function _api_petitions_mock_response($method) {
  switch ($method) {
    case 'index':
      $file = 'api_petitions_index.response.json';
      break;

    case 'index599':
      $file = 'api_petitions_index.response599.json';
      break;

    case 'retrieve':
      $file = 'api_petitions_retrieve.response.json';
      break;

    case 'retrieve404':
      $file = 'api_petitions_retrieve.response404.json';
      break;

    case 'retrieve599':
      $file = 'api_petitions_retrieve.response599.json';
      break;

    case 'load_signatures':
      $file = 'api_petitions_load_signatures.response.json';
      break;

    case 'load_signatures404':
      $file = 'api_petitions_load_signatures.response404.json';
      break;

    case 'load_signatures599':
      $file = 'api_petitions_load_signatures.response599.json';
      break;

    default:
      return '';
  }
  $response = file_get_contents(drupal_get_path('module', 'api_petitions') . '/example_responses/' . $file);
  return $response;
}

/**
 * Returns an example implementation's code for petitions methods.
 */
function _api_petitions_example_implementation($method, $language, $example) {
  $directory = drupal_get_path('module', 'api_petitions') . '/example_implementations/' . $language . '/' . $example;
  return $directory;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function api_petitions_form_petitions_data_form_alter(&$form, &$form_state) {
  $form['petitions_data_limits']['api_petitions_index_max_limit'] = array(
    '#title' => t('Petitions maximum result limit'),
    '#type' => 'textfield',
    '#default_value' => variable_get('api_petitions_index_max_limit', 1000),
    '#element_validate' => array('element_validate_number'),
  );
  $form['petitions_data_limits']['api_petitions_signatures_index_max_limit'] = array(
    '#title' => t('Signatures maximum result limit'),
    '#type' => 'textfield',
    '#default_value' => variable_get('api_petitions_signatures_index_max_limit', 1000),
    '#element_validate' => array('element_validate_number'),
  );
}

/**
 * Returns a Petitions API update message.
 *
 * @param array $api_change_parameters
 *   An array of parameters to assemble into a full message:
 *     msg: The message to display.
 *     website_url: The base URL without a trailing slash for documentation.
 *     pg_location: The path for the documentation.
 *
 * @return string
 *   The assembled message.
 */
function _api_petitions_api_update_message(array $api_change_parameters) {
  if (empty($api_change_parameters)) {
    return '';
  }
  if (!empty($api_change_parameters['msg'])) {
    $message = $api_change_parameters['msg'] . ' ';
  }
  else {
    $message = '';
  }
  if (!empty($api_change_parameters['website_url'])) {
    $website_url = t('See the documentation: @url', array(
      '@url' => $api_change_parameters['website_url'],
    ));
  }
  else {
    $website_url = '';
  }
  if (!empty($api_change_parameters['pg_location'])) {
    $pg_location = '/' . $api_change_parameters['pg_location'];
  }
  else {
    $pg_location = '';
  }
  $api_update_message = $message . $website_url . $pg_location;
  return $api_update_message;
}

/**
 * Returns the Developer page Petitions documentation preface HTML formatted.
 *
 * @return string
 *   An HTML formatted message.
 */
function _api_petitions_petitions_preface() {
  $message = '<p>' . t('Returns a list of petitions, individual petitions, and signatures attached to an individual petition.') . '</p>';
  $message .= theme('item_list', array(
    'title' => t('Details'),
    'items' => array(
      t('Non-Latin characters are replaced with an "x".'),
      t('Limits: 10 requests per second.'),
      t('Developers who need historic data on all public petitions should consider using our bulk data download, described above.'),
    ),
  ));
  return $message;
}

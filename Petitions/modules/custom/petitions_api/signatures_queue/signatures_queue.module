<?php

/**
 * @file
 * The signature queue system.
 *
 * Provides a queue-based backend for processing petition signatures submitted
 * via the API.
 */

/**
 * The default workflow batch size.
 */
define('SIGNATURES_QUEUE_BATCH_SIZE_DEFAULT', 10);

/**
 * The default value for the server-name event logging value.
 */
define('SIGNATURES_QUEUE_SERVER_NAME_DEFAULT', 'default');

/**
 * The default value for the worker-name event logging value.
 */
define('SIGNATURES_QUEUE_WORKER_NAME_DEFAULT', 'default');

/**
 * HTTP status codes.
 */
define('SIGNATURES_QUEUE_STATUS_OK', 200);
define('SIGNATURES_QUEUE_STATUS_BAD_REQUEST', 400);
define('SIGNATURES_QUEUE_STATUS_UNAUTHORIZED', 401);
define('SIGNATURES_QUEUE_STATUS_FORBIDDEN', 403);
define('SIGNATURES_QUEUE_STATUS_NOT_FOUND', 404);
define('SIGNATURES_QUEUE_STATUS_SERVER_ERROR', 500);
define('SIGNATURES_QUEUE_STATUS_UNKNOWN', 599);

/**
 * Custom error codes.
 */
define('SIGNATURES_QUEUE_ERROR_SERVICE_NOT_AVAILABLE', 73);
define('SIGNATURES_QUEUE_ERROR_PETITION_CLOSED', 74);
define('SIGNATURES_QUEUE_ERROR_FAILED_VALIDATION', 75);
define('SIGNATURES_QUEUE_ERROR_SIGNATURE_NOT_FOUND', 76);
define('SIGNATURES_QUEUE_ERROR_BLACKLISTED_EMAIL', 77);
define('SIGNATURES_QUEUE_ERROR_TEMPORARILY_UNAVAILABLE', 83);
define('SIGNATURES_QUEUE_ERROR_PETITION_NOT_FOUND', 84);
define('SIGNATURES_QUEUE_ERROR_INVALID_API_KEY', 85);
define('SIGNATURES_QUEUE_ERROR_UNKNOWN', 99);

/**
 * Implements hook_menu().
 */
function signatures_queue_menu() {
  $items = array();

  $items['admin/petitions/settings/signatures-queue'] = array(
    'title' => 'Signature Queues / Alert Thresholds',
    'description' => 'Configure Signature Queues / Alert Thresholds',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('signatures_queue_configure'),
    'access arguments' => array('administer queues'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
    'file' => 'signatures_queue.admin.inc',
  );
  $items['thank-you'] = array(
    'title' => '',
    'page callback' => '_signatures_queue_validation_page_callback',
    'access arguments' => array('validate petition signatures'),
    'file' => 'signatures_queue.pages.inc',
  );
  $items['thank-you/%'] = array(
    'title' => '',
    'page callback' => '_signatures_queue_validated_page_callback',
    'page arguments' => array(1),
    'access arguments' => array('validate petition signatures'),
    'file' => 'signatures_queue.pages.inc',
  );
  $items['validation-error'] = array(
    'title' => 'Validation Error',
    'page callback' => '_signatures_queue_validation_error_page_callback',
    'access arguments' => array('access content'),
    'file' => 'signatures_queue.pages.inc',
  );
  $items['petition-error'] = array(
    'title' => 'Petition Not Found',
    'page callback' => '_signatures_queue_petition_error_page_callback',
    'access arguments' => array('access content'),
    'file' => 'signatures_queue.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function signatures_queue_permission() {
  return array(
    'administer queues' => array(
      'title' => t('Administer signatures queue'),
    ),
    'monitor queues' => array(
      'title' => t('Monitor signatures queue'),
    ),
    'validate petition signatures' => array(
      'title' => t('Validate petition signatures'),
      'description' => t('Validate petition signatures by visiting their email verification links.'),
    ),
  );
}

/**
 * Implements hook_cron().
 */
function signatures_queue_cron() {
  // Reset expired items in the default queue implementation table. If that's
  // not used, this will simply be a no-op.
  db_update('signatures_pending_validation_queue')
    ->fields(array(
      'expire' => 0,
    ))
    ->condition('expire', 0, '<>')
    ->condition('expire', REQUEST_TIME, '<')
    ->execute();
}

/**
 * Implements hook_mail().
 */
function signatures_queue_mail($key, &$message, $params) {
  $language = $message['language'];
  switch ($key) {
    case 'initiate_signature_validation':
      module_load_include('inc', 'signatures_queue');
      $message['subject'] = _signatures_queue_validation_mail_text($key . '_subject', $language, $params);
      $message['body'][] = _signatures_queue_validation_mail_text($key . '_body', $language, $params);
      // Pass link as metadata to Mandrill.
      $message['metadata'] = array('validation_link' => $params['signature info']['validation_link']);
      break;

    case 'notify_admin':
      $message['subject'] = _signatures_queue_notify_admin_text('subject', $language, $params);
      $message['body'] = _signatures_queue_notify_admin_text('body', $language, $params);
      break;

    case 'send_fraud_alert':
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['body'];
      break;
  }
}

/**
 * Token callback to add unsafe tokens for signature validation mails.
 *
 * This function is used by the token_replace() call at the end of
 * _signatures_queue_validation_mail_text() to set up some additional tokens
 * that can be used in email messages generated by
 * _signatures_queue_send_validation_emails().
 *
 * @param array $replacements
 *   An associative array variable containing mappings from token names to
 *   values (for use with strtr()).
 * @param array $data
 *   An associative array of token replacement values.
 * @param array $options
 *   Unused parameter required by the token_replace() function.
 */
function signatures_queue_validation_email_tokens(array &$replacements, array $data, array $options) {
  if (isset($data['signature info'])) {
    global $base_url;
    $website_url = variable_get('petitions_data_petitions_website_url', $base_url);

    // Sanitize petition data.
    foreach ($data['signature info'] as $key => $info) {
      $data['signature info'][$key] = check_plain((string) $info);
    }

    // Tokens for all values in the signature_info array.
    // Creating $petition_id because it will be used several times.
    $petition_id = $data['signature info']['petition_id'];
    $replacements['[signature:petition-id]'] = $petition_id;
    $replacements['[signature:first-name]'] = $data['signature info']['first_name'];
    $replacements['[signature:last-name]'] = $data['signature info']['last_name'];
    $replacements['[signature:zip]'] = $data['signature info']['zip'];
    $replacements['[signature:email]'] = $data['signature info']['email'];
    $replacements['[signature:signup]'] = $data['signature info']['signup'];
    $replacements['[signature:timestamp-submitted]'] = $data['signature info']['timestamp_received_new_signature'];
    // Creating $key because it will be used several times.
    $key = $data['signature info']['secret_validation_key'];
    $replacements['[signature:secret-validation-key]'] = $key;
    // Creating $md5 because it will be used several times.
    $md5 = $data['signature info']['md5_encryption_key'];
    $replacements['[signature:signature-md5-encryption-key]'] = $md5;
    // Creating $validation_expiration because it will be used several times.
    $validation_expiration = $data['signature info']['timestamp_validation_close'];
    $replacements['[signature:timestamp_validation_close]'] = $validation_expiration;
    // Creating $signature_source_api_key because it will be used several times.
    $signature_source_api_key = $data['signature info']['signature_source_api_key'];
    $replacements['[signature:signature-source-api-key]'] = $signature_source_api_key;
    if (module_exists('api_key_manager')) {
      // Creating $key_node because it will be used several times.
      $key_node = api_key_manager_get_key($signature_source_api_key);

      $replacements['[signature:signature-source-name]'] = $key_node->field_api_key_manager_name['und'][0]['value'];
      $replacements['[signature:signature-source-url]'] = $key_node->field_api_key_manager_url['und'][0]['value'];

      if (!empty($key_node->field_api_key_manager_desc['und'][0]['value'])) {
        $replacements['[signature:signature-source-description]'] = $key_node->field_api_key_manager_desc['und'][0]['value'];
      }
      if (!empty($key_node->field_api_key_manager_org['und'][0]['value'])) {
        $replacements['[signature:signature-source-organization]'] = $key_node->field_api_key_manager_org['und'][0]['value'];
      }
      if (!empty($key_node->field_api_key_manager_phone['und'][0]['value'])) {
        $replacements['[signature:signature-source-phone]'] = $key_node->field_api_key_manager_phone['und'][0]['value'];
      }

    }
    // Tokens for additional values.
    $replacements['[signature:validation-url]'] = _signatures_queue_validation_link($website_url, $data['signature info']);
    // Load the petition via the API retrieve method.
    $petition = PetitionsController::load($petition_id);
    if (!empty($petition)) {
      // Tokens for values associated to the petition.
      $replacements['[petition:title]'] = $petition['title'];
      $replacements['[petition:body]'] = $petition['body'];
      $replacements['[petition:url]'] = $petition['url'];
      $replacements['[petition:deadline]'] = date('l, F j, Y', $petition['deadline']);
    }
  }
}


/**
 * Implements hook_shunt().
 */
function signatures_queue_shunt() {
  // Automatically declare a shunt for each workflow.
  $shunts = array();
  $workflows = signatures_queue_get_workflow_names();
  foreach ($workflows as $workflow) {
    $name = "shunt_signatures_queue_{$workflow}";
    $description = t('A shunt for the "@workflow" workflow.', array(
      '@workflow' => str_replace('_', ' ', ucfirst($workflow)),
    ));
    $shunts[$name] = $description;
  }

  $shunts['signatures_queue_receive_new_signatures_validate_petition'] = t('Prevents the "receive new signatures" workflow from validating the requested petition ID, so that the workflow performs no database queries.');

  return $shunts;
}

/**
 * Gets the domain name from an email address.
 *
 * @param string $address
 *   An email address.
 *
 * @return string|false
 *   The domain name portion of the given email address, or FALSE if it is not a
 *   valid email address.
 */
function signatures_queue_get_domain_from_email($address) {
  // Inline the valid_email_address() test to keep this unit-testable. It's the
  // lesser of two evils. :(
  if (!filter_var($address, FILTER_VALIDATE_EMAIL)) {
    return FALSE;
  }

  $parts = explode('@', $address);
  return strtolower($parts[count($parts) - 1]);
}

/**
 * Gets an array of queue names.
 *
 * Note: Real queues are named something_queue. The tables listed here that
 * don't end in the suffix "_queue" aren't actually queues. Conceptually
 * they're part of the "signatures queue" in the sense that these are holding
 * bins where signatures go before they're done being processed and counted.
 * But they're not DrupalQueue queues.
 *
 * @return array
 *   Array of signature queues and descriptions keyed by queue name.
 */
function signatures_queue_get_queue_names() {
  return array(
    'signatures_submitted_queue' => t('Queue submissions received via API POST requests or form submissions by unauthenticated users.'),
    'signatures_pending_validation_queue' => t('Retrieve petitions from signatures_submitted_queue, send a validation email, then move the pending signature here.'),
    'validations_queue' => t('When a user clicks a validation link received via email, store the secret validation key here.'),
    'pending_validations_queue' => t('Move records from validations_queue to here for processing.'),
    'signatures_pending_validation' => t('Move records from signatures_pending_validation_queue to here for processing.'),
    'validations_orphaned' => t('When processing validated signatures, records in validations that do not have matching records in signatures_pending_validation are orphans.'),
    'signature_validation_processor_queue' => t('Move records from signatures_pending_validation_queue to database queue for processing.'),
  );
}

/**
 * Gets the time elapsed since a given timestamp, measured in microseconds.
 *
 * Because its input is in timestamps (not "micro timestamps", if you will),
 * this function can only be accurate to the nearest second. It's value is not
 * actually in precision but in enforcing a common unit of measure.
 *
 * @param int $timestamp
 *   A timestamp, as returned from time().
 *
 * @return int
 *   The number of microseconds elapsed.
 *
 * @see timer_read()
 */
function signatures_queue_get_microtime_elapsed_since($timestamp) {
  return (int) round((time() - $timestamp) * 1000);
}

/**
 * Gets a list of workflow names.
 *
 * @return array
 *   An indexed array of workflow names.
 */
function signatures_queue_get_workflow_names() {
  return array(
    'receive_new_signatures',
    'initiate_signature_validation',
    'receive_signature_validation',
    'preprocess_signatures',
    'process_signatures',
    'archive_signatures',
    'process_petitions',
  );
}

/**
 * Invokes a given workflow.
 *
 * This function is normally invoked via Drush (i.e.
 * `drush signatures-queue-invoke-workflow`), except for user-initiated
 * workflows.
 *
 * @param string $workflow
 *   The name of the workflow to invoke, as defined in
 *   signatures_queue_get_workflow_names().
 * @param array $options
 *   (optional) An array of arbitrary options data as required by particular
 *   workflows. Defaults to an empty array. In addition to workflow-specific
 *   options, the invoker expects these (key, value) pairs:
 *   - server_name: (optional) An arbitrary identifier for the server processing
 *     the workflow. Defaults to SIGNATURES_QUEUE_SERVER_NAME_DEFAULT.
 *   - worker_name: (optional) An arbitrary identifier for the invoking process
 *     (e.g., cron job). Defaults to SIGNATURES_QUEUE_WORKER_NAME_DEFAULT.
 *
 * @return int
 *   Returns one of the following status codes indicating the workflow outcome:
 *     - SIGNATURES_QUEUE_STATUS_OK
 *     - SIGNATURES_QUEUE_STATUS_BAD_REQUEST
 *     - SIGNATURES_QUEUE_STATUS_FORBIDDEN
 *     - SIGNATURES_QUEUE_STATUS_NOT_FOUND
 *     - SIGNATURES_QUEUE_STATUS_SERVER_ERROR
 *
 * @throws Exception()
 *   If an invalid workflow is specified.
 */
function signatures_queue_invoke_workflow($workflow, array $options = array()) {
  // Initialize default options.
  $server_name = (!empty($options['server_name'])) ? $options['server_name'] : SIGNATURES_QUEUE_SERVER_NAME_DEFAULT;
  $worker_name = (!empty($options['worker_name'])) ? $options['worker_name'] : SIGNATURES_QUEUE_WORKER_NAME_DEFAULT;

  // Make sure given workflow is valid.
  if (!in_array($workflow, signatures_queue_get_workflow_names())) {
    throw new Exception("No such workflow '{$workflow}'.");
  }

  // Detect a shunt trip.
  $shunt_name = "shunt_signatures_queue_{$workflow}";
  if (shunt_is_enabled($shunt_name)) {
    logger_event("signatures_queue.workflow.{$workflow}.status.shunted");
    return SIGNATURES_QUEUE_ERROR_SERVICE_NOT_AVAILABLE;
  }

  // Invoke the workflow.
  module_load_include('inc', 'signatures_queue');
  $job_id = _signatures_queue_create_job_id($workflow, $server_name, $worker_name);
  try {
    // Get the workflow function.
    module_load_include('inc', 'signatures_queue', "includes/{$workflow}");
    $function_name = "_signatures_queue_{$workflow}";
    if (!function_exists($function_name)) {
      $message = t('Workflow function @function_name is undefined. The codebase may be corrupt.', array(
        '@function_name' => $function_name,
      ));
      throw new Exception($message);
    }

    // Log workflow invocation.
    logger_event("signatures_queue.workflow.{$workflow}.invoked");

    // Dispatch the worker.
    timer_start('signatures_queue_workflow');
    $status = call_user_func($function_name, $job_id, $server_name, $worker_name, $options);
    timer_stop('signatures_queue_workflow');

    // Log workflow completion details.
    logger_event("signatures_queue.workflow.{$workflow}.completed");
    logger_event("signatures_queue.workflow.{$workflow}.processing_time", 'time', (int) timer_read('signatures_queue_workflow'));
    $log_status = _signatures_queue_get_loggable_workflow_status($workflow, $status);
    logger_event("signatures_queue.workflow.{$workflow}.status.{$log_status}");
  }
  catch (Exception $e) {
    logger_event("signatures_queue.workflow.{$workflow}.status.server_error");
    $watchdog_suffix = _signatures_queue_watchdog_suffix($workflow, $job_id, $server_name, $worker_name);
    watchdog('signatures_queue', "Fatal error in workflow. @suffix Exception: @exception", array(
      '@suffix' => $watchdog_suffix,
      '@exception' => json_encode($e->getMessage()),
    ), WATCHDOG_ERROR);
    return SIGNATURES_QUEUE_ERROR_UNKNOWN;
  }

  return $status;
}

/**
 * Gets a status string usable for logging from a workflow status return value.
 *
 * @param string $workflow
 *   The name of the workflow to invoke, as defined in
 *   signatures_queue_get_workflow_names().
 * @param int $status
 *   The status value returned from a workflow function.
 *
 * @return string
 *   A string usable as a status code in logging, e.g., "ok" or "bad_request".
 */
function _signatures_queue_get_loggable_workflow_status($workflow, $status) {
  $error_info = api_errors_error_code_information($status);
  $status_code = $error_info['0'];
  $status_mappings = array(
    SIGNATURES_QUEUE_STATUS_OK => 'ok',
    SIGNATURES_QUEUE_STATUS_UNAUTHORIZED => 'bad_request',
    SIGNATURES_QUEUE_STATUS_BAD_REQUEST => 'bad_request',
    SIGNATURES_QUEUE_STATUS_FORBIDDEN => 'forbidden',
    SIGNATURES_QUEUE_STATUS_NOT_FOUND => 'not_found',
    SIGNATURES_QUEUE_STATUS_SERVER_ERROR => 'server_error',
    SIGNATURES_QUEUE_STATUS_UNKNOWN => 'server_error',
  );
  if (array_key_exists($status_code, $status_mappings)) {
    $log_status = $status_mappings[$status];
  }
  else {
    $log_status = 'unknown';
    watchdog('signatures_queue', 'Workflow "@workflow" returned unknown status code: @status.', array(
      '@workflow' => $workflow,
      '@status' => $status_code,
    ));
  }
  return $log_status;
}

/**
 * Logs metrics around the size of a given data store (table or queue).
 *
 * @param string $data_store_name
 *   The name of the data store.
 * @param int $record_count
 *   The number of items in the data store.
 */
function _signatures_queue_data_store_size_event($data_store_name, $record_count) {
  $record_count = (int) $record_count;

  // Log the size.
  logger_event("signatures_queue.data_store.{$data_store_name}.size", 'gauge', $record_count);

  // Log if empty.
  if ($record_count == 0) {
    logger_event("signatures_queue.data_store.{$data_store_name}.emptied");
  }
}

/**
 * Set active database according to settings.php configuration.
 *
 * Don't forget to call db_set_active() to set back to default after using this.
 */
function signatures_queue_set_db($conf_name = 'signatures_processing') {
  global $databases;
  global $drupal_test_info;

  // If this is a simpletest run, do not switch dbs. Simpletest prefixing
  // does not support multiple databases.
  if (empty($drupal_test_info['test_run_id']) && !empty($databases[$conf_name])) {
    // Set database so that we create the tables there.
    db_set_active($conf_name);
  }
  // If the database is not defined, set back to the default db.
  elseif (empty($databases[$conf_name])) {
    db_set_active();
  }
}

/**
 * Get the admin-defined batch size for a given workflow.
 *
 * @param string $workflow
 *   The machine name of the workflow as returned from
 *   signatures_queue_get_workflow_names().
 *
 * @return int|false
 *   The batch size if the given workflow is valid, or FALSE if it is not.
 */
function signatures_queue_get_queue_batch_size($workflow) {
  // Fail if given workflow is invalid.
  if (!in_array($workflow, signatures_queue_get_workflow_names())) {
    return FALSE;
  }

  // Get the size from the configured variable.
  $batch_size = variable_get("signatures_queue_${workflow}_batch_size", SIGNATURES_QUEUE_BATCH_SIZE_DEFAULT);
  return (int) $batch_size;
}

/**
 * Implements hook_form_alter().
 */
function signatures_queue_form_alter(&$form, &$form_state, $form_id) {
  // Add signature validation email fields to the wh_petitions form.
  if ($form_id == 'wh_petitions_admin_petition_email_settings') {
    module_load_include('inc', 'signatures_queue');

    // Signature validation email settings.
    $signature_validation_email_token_help = t('Available tokens are: !site-name, !signature-first-name, !signature-last-name, !signature-zip, !signature-email, !signature-signup, !signature-timestamp, !signature-secret, !signature-md5, !signature-close, !source-name, !source-desc, !source-url, !source-org, !source-phone, !source-key, !signature-validation-url, !petition-title, !petition-body, !petition-url, !petition-deadline.', array(
      '!site-name' => '[site:name]',
      '!signature-first-name' => '[signature:first-name]',
      '!signature-last-name' => '[signature:last-name]',
      '!signature-zip' => '[signature:zip]',
      '!signature-email' => '[signature:email]',
      '!signature-signup' => '[signature:signup]',
      '!signature-timestamp' => '[signature:timestamp-submitted]',
      '!signature-secret' => '[signature:secret-validation-key]',
      '!signature-md5' => '[signature:signature-md5-encryption-key]',
      '!signature-close' => '[signature:timestamp_validation_close]',
      '!source-name' => '[signature:signature-source-name]',
      '!source-desc' => '[signature:signature-source-description]',
      '!source-url' => '[signature:signature-source-url]',
      '!source-org' => '[signature:signature-source-organization]',
      '!source-phone' => '[signature:signature-source-phone]',
      '!source-key' => '[signature:signature-source-api-key]',
      '!signature-validation-url' => '[signature:validation-url]',
      '!petition-title' => '[petition:title]',
      '!petition-body' => '[petition:body]',
      '!petition-url' => '[petition:url]',
      '!petition-deadline' => '[petition:deadline]',
    ));

    $form['signature_validation_email'] = array(
      '#type' => 'fieldset',
      '#title' => t('Notification: You must validate your signature for it to be counted'),
      '#description' => t('Edit the signature validation e-mail message.') . ' ' . $signature_validation_email_token_help,
      '#weight' => 1,
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['signature_validation_email']['user_mail_initiate_signature_validation_subject'] = array(
      '#type' => 'textfield',
      '#title' => t('Subject'),
      '#default_value' => _signatures_queue_validation_mail_text('initiate_signature_validation_subject', NULL, array(), FALSE),
      '#maxlength' => 180,
    );
    $form['signature_validation_email']['user_mail_initiate_signature_validation_body'] = array(
      '#type' => 'textarea',
      '#title' => t('Body'),
      '#default_value' => _signatures_queue_validation_mail_text('initiate_signature_validation_body', NULL, array(), FALSE),
      '#rows' => 15,
    );
  }
}

/**
 * Find out when queue(s) were last emptied.
 *
 * @param string $name
 *   (Optional) The machine name of a signatures queue.
 *
 * @return array
 *   Returns array keyed by queue name(s). Value is a timestamp of when queue
 *   was last emptied.
 */
function signatures_queue_check_empty($name = NULL) {
  $last_emptied = array();

  // If a queue name was specified, check only that queue.
  if ($name) {
    $queue_names = array($name);
  }
  // Otherwise, check all queues.
  else {
    $queue_names = array_keys(signatures_queue_get_queue_names());
  }

  foreach ($queue_names as $queue_name) {
    if (!SignaturesQueue::isValidQueueName($queue_name)) {
      continue;
    }

    // Make sure every queue exists. There is no harm in trying to recreate an
    // existing queue.
    $queue = SignaturesQueue::get($queue_name);
    $queue->createQueue();

    $now = time();
    $num_items = $queue->numberOfItems();
    _signatures_queue_data_store_size_event($queue_name, $num_items);

    // For any empty queue, updated corresponding last_emptied variable.
    if ($num_items == 0) {
      $last_emptied[$queue_name] = $now;
      variable_set('signatures_queue_' . $queue_name . '_last_emptied', $now);
    }
    // Otherwise, get existing last_emptied variable for later comparison.
    else {
      $last_emptied[$queue_name] = variable_get('signatures_queue_' . $queue_name . '_last_emptied', 0);
    }
  }

  // If all queues were checked, update signatures_queue_oldest_emptied.
  if (!$name) {
    $oldest_emptied = min($last_emptied);
    variable_set('signatures_queue_oldest_emptied', $oldest_emptied);
    watchdog('signatures_queue', 'Empty check was performed on all signature queues and logged. Oldest emptied queue was logged as @oldest_emptied.', array('@oldest_emptied' => $oldest_emptied));
  }
  else {
    watchdog('signatures_queue', 'Empty check was performed on @queue_name queue and logged.', array('@queue_name' => $name));
  }

  return $last_emptied;
}

/**
 * Evaluates petition metrics against alert thresholds.
 *
 * @param int $petition_id
 *   Petition node ID
 */
function signatures_queue_compare_thresholds($petition_id) {
  $petition_metric_fields_map = PetitionsSelectQueryMysql::getPetitionMetricFieldsMap();
  $metrics = array();
  $petitions_alert_signature_threshold = variable_get('petitions_alert_signature_threshold', 0);
  $petitions_alert_enabled = variable_get('petitions_alert_enabled', FALSE);
  $petitions_alert_email_throttle = variable_get('petitions_alert_email_throttle');

  // Only run this if the email throttle is set, otherwise will run every time.
  if ($petitions_alert_enabled && $petitions_alert_email_throttle && $petitions_alert_signature_threshold) {
    $current_time = time();
    $time_threshold = $current_time - variable_get('petitions_alert_email_throttle');

    $node = node_load($petition_id);
    $wrapper = entity_metadata_wrapper('node', $node);

    $last_alert = $wrapper->field_petition_last_alert->raw();

    // Set last alert value as soon as possible for multithreading.
    PetitionsController::setPetitionFieldValue($petition_id, 'field_petition_last_alert', 'value', $current_time);

    if ($last_alert == NULL || $last_alert <= $time_threshold) {
      foreach ($petition_metric_fields_map as $metric_name => $field_mapping) {
        $ratio = $wrapper->$field_mapping['table']->raw() / $node->signature_count;
        $metric_var = 'petitions_alert_threshold_upper_' . $metric_name;
        $bound = variable_get($metric_var);
        if (!empty($bound) && $ratio > $bound) {
          $metrics[] = $metric_var;
        }

        $metric_var = 'petitions_alert_threshold_lower_' . $metric_name;
        $bound = variable_get($metric_var);
        if (!empty($bound) && $ratio < $bound) {
          $metrics[] = $metric_var;
        }
      }
      if ($metrics) {
        // Send an email for thresholds crossed.
        _signatures_queue_send_fraud_alert($node, $metrics);
      }
    }
  }
}
/**
 * Send email alert about fraud metric thresholds crossed.
 *
 * @param object $node
 *   Petition Node to alert on.
 * @param array $metrics
 *   Array of metric thresholds crossed.
 */
function _signatures_queue_send_fraud_alert($node, $metrics) {
  global $language;
  $edit_base_url = variable_get('edit_base_url');
  $petition_title = $node->title;
  $url = $edit_base_url . '/node/' . $node->nid . '/analysis';

  $email_address = variable_get('petitions_alert_email_address');

  $subject = variable_get("petitions_alert_email_subject");
  $params['subject'] = t($subject, array('!title' => $petition_title));

  $body = variable_get("petitions_alert_email_body");
  $params['body'] = t($body, array(
      '!title' => $petition_title,
      '!metrics' => implode("\n", $metrics),
      '!url' => $url,
    )
  );

  $message = drupal_mail('signatures_queue', 'send_fraud_alert', $email_address, $language, $params);

  foreach ($metrics as $metric) {
    logger_event('signatures_queue.workflow.process_signatures.notifications.' . $metric, 'set', (int) $node->nid);
  }
}

/**
 * Adds signatures to the fraud data table if they have not already been added.
 */
function signatures_queue_update_fraud_data() {
  // Find all signatures not already recorded in the fraud data table.
  $query = db_select("signature_mail", "sm");
  $query->fields("sm", array("id", "petition_id", "ip_address"))
        ->join("users", "u", "u.uid = sm.uid");
  $query->fields("u", array("mail"))
        ->join("field_data_field_petition_status", "fdfps", "fdfps.entity_id = sm.petition_id");
  $query->leftJoin("signature_mail_fraud_data", "smfd", "smfd.signature_mail_id = sm.id");
  $query->isNull("smfd.signature_mail_id")
        ->condition("fdfps.entity_type", "node")
        ->condition("fdfps.bundle", "petition")
        ->condition("fdfps.field_petition_status_value", wh_petitions_signable_statuses());
  $results = $query->execute()->fetchAllAssoc("id");

  logger_event('signatures_queue.fraud_data.signatures_to_process', 'set', (int) count($results));

  foreach ($results as $result) {
    logger_event('signatures_queue.fraud_data.signature_processed');
    signature_mail_fraud_data_update_data($result->id, $result->petition_id, $result->mail, $result->ip_address);
  }
}

/**
 * Provide a simple method to write debugging info for signature processing.
 *
 * @param string $message
 *   The message to log. See t() for documentation on how $message and
 *   $variables interact.
 * @param array $variables
 *   The variables to replace in the message.
 */
function signatures_queue_debug_logger($message, $variables = array()) {
  if (variable_get('signatures_queue_debug', 0)) {
    $variables = array_merge($variables, array('!microtime' => microtime()));
    $message .= ' Microtime: !microtime';
    watchdog('signatures_queue_debug', $message, $variables, WATCHDOG_DEBUG);
  }
}

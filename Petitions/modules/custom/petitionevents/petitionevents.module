<?php
/**
 * @file
 * Functionality for events that are triggered in relation to petitions.
 */

module_load_include('inc', 'petitionevents', 'petitionevents_vboactions');

/**
 * Builds a remove petitions settings form.
 *
 * @param array $form
 *   Form object to add the remove petition form to.
 */
function petitionevents_remove_email_settings_form(&$form) {
  $form['remove_email'] = array(
    '#type' => 'fieldset',
    '#title' => t('Notification: Petition Remove'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#description' => t("The default email sent to a user when their petition is taken down by an administrator."),
  );

  $form['remove_email']['petitionevents_remove_email_from_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Reply To name'),
    '#default_value' => variable_get('petitionevents_remove_email_from_name'),
    '#required' => TRUE,
  );

  $form['remove_email']['petitionevents_remove_email_from_address'] = array(
    '#type' => 'textfield',
    '#title' => t('Reply To address'),
    '#default_value' => variable_get('petitionevents_remove_email_from_address'),
    '#required' => TRUE,
  );

  $form['remove_email']['petitionevents_remove_email_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#default_value' => variable_get('petitionevents_remove_email_subject'),
    '#required' => TRUE,
  );

  $form['remove_email']['petitionevents_remove_email_bcc'] = array(
    '#type' => 'textarea',
    '#title' => t('BCC'),
    '#default_value' => variable_get('petitionevents_remove_email_bcc'),
    '#description' => t("Enter multiple BCC email addresses, separated by comma."),
    '#required' => FALSE,
  );

  $form['remove_email']['petitionevents_remove_email_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Body'),
    '#default_value' => variable_get('petitionevents_remove_email_body'),
    '#required' => FALSE,
    '#description' => t("Supports the !petition_title token."),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function petitionevents_form_wh_petitions_admin_petition_email_settings_alter(&$form, &$form_state, $form_id) {
  petitionevents_remove_email_settings_form($form);
}

/**
 * Implements tokens for mysql petitions in emails.
 *
 * @param array $message
 *   Representation of the email to be sent.
 * @param array $context
 *   An associative array of petition details.
 *   - petition_title: The petition title.
 *   - nid: (optional) The petition node ID, if applicable.
 *   - legacy_id: (optional) The petition Mongo ID, if applicable.
 */
function petitionevents_mail_additions(&$message, $context) {
  // Leaving the line below commented just in case there is a strong reason to
  // process mongo info here.
  // $is_mongo_petition = !empty($context['legacy_id']);
  $is_mysql_petition = !empty($context['nid']);
  $title = $context['petition_title'];

  if ($is_mysql_petition && petitions_data_mysql_writes_are_enabled()) {
    $message = str_replace('!petition_nid', $context['nid'], $message);
    $nid = $context['nid'];

    // Replacement for petition_remove_link.
    $link = petitionadmin_get_admin_link($nid);
    $message = str_replace('!petition_remove_link', $link, $message);
    $message = str_replace('!petition_nid', $nid, $message);
  }

  $message = str_replace('!petition_title', $title, $message);
}
